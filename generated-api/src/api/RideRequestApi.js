/**
 * CarPool API
 * API documentation for CarPool application
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AnswerRideRequestRequest from '../model/AnswerRideRequestRequest';
import PageResponseRideRequestResponse from '../model/PageResponseRideRequestResponse';
import RideRequestRequest from '../model/RideRequestRequest';
import RideRequestResponse from '../model/RideRequestResponse';

/**
* RideRequest service.
* @module api/RideRequestApi
* @version 1.0
*/
export default class RideRequestApi {

    /**
    * Constructs a new RideRequestApi. 
    * @alias module:api/RideRequestApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the answerRideOffer operation.
     * @callback module:api/RideRequestApi~answerRideOfferCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RideRequestResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/AnswerRideRequestRequest} answerRideRequestRequest 
     * @param {module:api/RideRequestApi~answerRideOfferCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RideRequestResponse}
     */
    answerRideOffer(answerRideRequestRequest, callback) {
      let postBody = answerRideRequestRequest;
      // verify the required parameter 'answerRideRequestRequest' is set
      if (answerRideRequestRequest === undefined || answerRideRequestRequest === null) {
        throw new Error("Missing the required parameter 'answerRideRequestRequest' when calling answerRideOffer");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RideRequestResponse;
      return this.apiClient.callApi(
        '/ride-requests/answer', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createRideRequest operation.
     * @callback module:api/RideRequestApi~createRideRequestCallback
     * @param {String} error Error message, if any.
     * @param {Number} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/RideRequestRequest} rideRequestRequest 
     * @param {module:api/RideRequestApi~createRideRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Number}
     */
    createRideRequest(rideRequestRequest, callback) {
      let postBody = rideRequestRequest;
      // verify the required parameter 'rideRequestRequest' is set
      if (rideRequestRequest === undefined || rideRequestRequest === null) {
        throw new Error("Missing the required parameter 'rideRequestRequest' when calling createRideRequest");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/ride-requests/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRideOffers operation.
     * @callback module:api/RideRequestApi~getRideOffersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RideRequestResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} rideOfferId 
     * @param {module:api/RideRequestApi~getRideOffersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RideRequestResponse>}
     */
    getRideOffers(rideOfferId, callback) {
      let postBody = null;
      // verify the required parameter 'rideOfferId' is set
      if (rideOfferId === undefined || rideOfferId === null) {
        throw new Error("Missing the required parameter 'rideOfferId' when calling getRideOffers");
      }

      let pathParams = {
      };
      let queryParams = {
        'rideOfferId': rideOfferId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [RideRequestResponse];
      return this.apiClient.callApi(
        '/ride-requests/requests', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRideRequestsForRideOfferPaginated operation.
     * @callback module:api/RideRequestApi~getRideRequestsForRideOfferPaginatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageResponseRideRequestResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} rideOfferId 
     * @param {Object} opts Optional parameters
     * @param {Number} [page = 0)] 
     * @param {Number} [size = 10)] 
     * @param {module:api/RideRequestApi~getRideRequestsForRideOfferPaginatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageResponseRideRequestResponse}
     */
    getRideRequestsForRideOfferPaginated(rideOfferId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'rideOfferId' is set
      if (rideOfferId === undefined || rideOfferId === null) {
        throw new Error("Missing the required parameter 'rideOfferId' when calling getRideRequestsForRideOfferPaginated");
      }

      let pathParams = {
      };
      let queryParams = {
        'rideOfferId': rideOfferId,
        'page': opts['page'],
        'size': opts['size']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PageResponseRideRequestResponse;
      return this.apiClient.callApi(
        '/ride-requests/requests/paginated', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the viewUsersRideRequests operation.
     * @callback module:api/RideRequestApi~viewUsersRideRequestsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RideRequestResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/RideRequestApi~viewUsersRideRequestsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RideRequestResponse>}
     */
    viewUsersRideRequests(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [RideRequestResponse];
      return this.apiClient.callApi(
        '/ride-requests/user-requests', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the viewUsersRideRequestsPaginated operation.
     * @callback module:api/RideRequestApi~viewUsersRideRequestsPaginatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageResponseRideRequestResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Number} [page = 0)] 
     * @param {Number} [size = 10)] 
     * @param {module:api/RideRequestApi~viewUsersRideRequestsPaginatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageResponseRideRequestResponse}
     */
    viewUsersRideRequestsPaginated(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'size': opts['size']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PageResponseRideRequestResponse;
      return this.apiClient.callApi(
        '/ride-requests/user-requests/paginated', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
