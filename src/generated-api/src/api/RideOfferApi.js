/**
 * CarPool API
 * API documentation for CarPool application
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import EditRideOfferRequest from '../model/EditRideOfferRequest';
import PageResponseRideOfferResponse from '../model/PageResponseRideOfferResponse';
import RideOfferRequest from '../model/RideOfferRequest';
import RideOfferResponse from '../model/RideOfferResponse';
import UserResponse from '../model/UserResponse';

/**
* RideOffer service.
* @module api/RideOfferApi
* @version 1.0
*/
export default class RideOfferApi {

    /**
    * Constructs a new RideOfferApi. 
    * @alias module:api/RideOfferApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createRideOffer operation.
     * @callback module:api/RideOfferApi~createRideOfferCallback
     * @param {String} error Error message, if any.
     * @param {Number} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/RideOfferRequest} rideOfferRequest 
     * @param {module:api/RideOfferApi~createRideOfferCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Number}
     */
    createRideOffer(rideOfferRequest, callback) {
      let postBody = rideOfferRequest;
      // verify the required parameter 'rideOfferRequest' is set
      if (rideOfferRequest === undefined || rideOfferRequest === null) {
        throw new Error("Missing the required parameter 'rideOfferRequest' when calling createRideOffer");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/offers/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRideOffer operation.
     * @callback module:api/RideOfferApi~deleteRideOfferCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {module:api/RideOfferApi~deleteRideOfferCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteRideOffer(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteRideOffer");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/offers/details/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRideOfferFinished operation.
     * @callback module:api/RideOfferApi~deleteRideOfferFinishedCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/RideOfferApi~deleteRideOfferFinishedCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteRideOfferFinished(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/offers/delete-finished', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the editRideOfferDetails operation.
     * @callback module:api/RideOfferApi~editRideOfferDetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RideOfferResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/EditRideOfferRequest} editRideOfferRequest 
     * @param {module:api/RideOfferApi~editRideOfferDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RideOfferResponse}
     */
    editRideOfferDetails(editRideOfferRequest, callback) {
      let postBody = editRideOfferRequest;
      // verify the required parameter 'editRideOfferRequest' is set
      if (editRideOfferRequest === undefined || editRideOfferRequest === null) {
        throw new Error("Missing the required parameter 'editRideOfferRequest' when calling editRideOfferDetails");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RideOfferResponse;
      return this.apiClient.callApi(
        '/offers/details', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the filterRideOffers operation.
     * @callback module:api/RideOfferApi~filterRideOffersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageResponseRideOfferResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Number} [page = 0)] 
     * @param {Number} [size = 10)] 
     * @param {String} [startLocation] 
     * @param {String} [endLocation] 
     * @param {Date} [departureTime] 
     * @param {module:api/RideOfferApi~filterRideOffersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageResponseRideOfferResponse}
     */
    filterRideOffers(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'size': opts['size'],
        'startLocation': opts['startLocation'],
        'endLocation': opts['endLocation'],
        'departureTime': opts['departureTime']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PageResponseRideOfferResponse;
      return this.apiClient.callApi(
        '/offers/filter', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findAllRideOffers operation.
     * @callback module:api/RideOfferApi~findAllRideOffersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RideOfferResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/RideOfferApi~findAllRideOffersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RideOfferResponse>}
     */
    findAllRideOffers(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [RideOfferResponse];
      return this.apiClient.callApi(
        '/offers/all', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findAllRideOffersPaginated operation.
     * @callback module:api/RideOfferApi~findAllRideOffersPaginatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageResponseRideOfferResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Number} [page = 0)] 
     * @param {Number} [size = 10)] 
     * @param {module:api/RideOfferApi~findAllRideOffersPaginatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageResponseRideOfferResponse}
     */
    findAllRideOffersPaginated(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'size': opts['size']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PageResponseRideOfferResponse;
      return this.apiClient.callApi(
        '/offers/all/paginated', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the markRideAsFinished operation.
     * @callback module:api/RideOfferApi~markRideAsFinishedCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {module:api/RideOfferApi~markRideAsFinishedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    markRideAsFinished(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling markRideAsFinished");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/offers/mark-finished/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchForRides operation.
     * @callback module:api/RideOfferApi~searchForRidesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageResponseRideOfferResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} keyword 
     * @param {Object} opts Optional parameters
     * @param {Number} [page = 0)] 
     * @param {Number} [size = 10)] 
     * @param {module:api/RideOfferApi~searchForRidesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageResponseRideOfferResponse}
     */
    searchForRides(keyword, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'keyword' is set
      if (keyword === undefined || keyword === null) {
        throw new Error("Missing the required parameter 'keyword' when calling searchForRides");
      }

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'size': opts['size'],
        'keyword': keyword
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PageResponseRideOfferResponse;
      return this.apiClient.callApi(
        '/offers/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the showAllProviders operation.
     * @callback module:api/RideOfferApi~showAllProvidersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UserResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/RideOfferApi~showAllProvidersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UserResponse>}
     */
    showAllProviders(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [UserResponse];
      return this.apiClient.callApi(
        '/offers/all/providers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the viewRideOfferDetails operation.
     * @callback module:api/RideOfferApi~viewRideOfferDetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RideOfferResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} ID 
     * @param {module:api/RideOfferApi~viewRideOfferDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RideOfferResponse}
     */
    viewRideOfferDetails(ID, callback) {
      let postBody = null;
      // verify the required parameter 'ID' is set
      if (ID === undefined || ID === null) {
        throw new Error("Missing the required parameter 'ID' when calling viewRideOfferDetails");
      }

      let pathParams = {
      };
      let queryParams = {
        'ID': ID
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RideOfferResponse;
      return this.apiClient.callApi(
        '/offers/details', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
