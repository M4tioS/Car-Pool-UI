/**
 * CarPool API
 * API documentation for CarPool application
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The RideOfferResponse model module.
 * @module model/RideOfferResponse
 * @version 1.0
 */
class RideOfferResponse {
    /**
     * Constructs a new <code>RideOfferResponse</code>.
     * @alias module:model/RideOfferResponse
     */
    constructor() { 
        
        RideOfferResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RideOfferResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RideOfferResponse} obj Optional instance to populate.
     * @return {module:model/RideOfferResponse} The populated <code>RideOfferResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RideOfferResponse();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('startLocation')) {
                obj['startLocation'] = ApiClient.convertToType(data['startLocation'], 'String');
            }
            if (data.hasOwnProperty('endLocation')) {
                obj['endLocation'] = ApiClient.convertToType(data['endLocation'], 'String');
            }
            if (data.hasOwnProperty('availableSeats')) {
                obj['availableSeats'] = ApiClient.convertToType(data['availableSeats'], 'Number');
            }
            if (data.hasOwnProperty('departureTime')) {
                obj['departureTime'] = ApiClient.convertToType(data['departureTime'], 'Date');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('creatorEmail')) {
                obj['creatorEmail'] = ApiClient.convertToType(data['creatorEmail'], 'String');
            }
            if (data.hasOwnProperty('lastModified')) {
                obj['lastModified'] = ApiClient.convertToType(data['lastModified'], 'Date');
            }
            if (data.hasOwnProperty('createdAt')) {
                obj['createdAt'] = ApiClient.convertToType(data['createdAt'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RideOfferResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RideOfferResponse</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['startLocation'] && !(typeof data['startLocation'] === 'string' || data['startLocation'] instanceof String)) {
            throw new Error("Expected the field `startLocation` to be a primitive type in the JSON string but got " + data['startLocation']);
        }
        // ensure the json data is a string
        if (data['endLocation'] && !(typeof data['endLocation'] === 'string' || data['endLocation'] instanceof String)) {
            throw new Error("Expected the field `endLocation` to be a primitive type in the JSON string but got " + data['endLocation']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['creatorEmail'] && !(typeof data['creatorEmail'] === 'string' || data['creatorEmail'] instanceof String)) {
            throw new Error("Expected the field `creatorEmail` to be a primitive type in the JSON string but got " + data['creatorEmail']);
        }

        return true;
    }


}



/**
 * @member {Number} id
 */
RideOfferResponse.prototype['id'] = undefined;

/**
 * @member {String} startLocation
 */
RideOfferResponse.prototype['startLocation'] = undefined;

/**
 * @member {String} endLocation
 */
RideOfferResponse.prototype['endLocation'] = undefined;

/**
 * @member {Number} availableSeats
 */
RideOfferResponse.prototype['availableSeats'] = undefined;

/**
 * @member {Date} departureTime
 */
RideOfferResponse.prototype['departureTime'] = undefined;

/**
 * @member {module:model/RideOfferResponse.StatusEnum} status
 */
RideOfferResponse.prototype['status'] = undefined;

/**
 * @member {String} creatorEmail
 */
RideOfferResponse.prototype['creatorEmail'] = undefined;

/**
 * @member {Date} lastModified
 */
RideOfferResponse.prototype['lastModified'] = undefined;

/**
 * @member {Date} createdAt
 */
RideOfferResponse.prototype['createdAt'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
RideOfferResponse['StatusEnum'] = {

    /**
     * value: "CANCELLED"
     * @const
     */
    "CANCELLED": "CANCELLED",

    /**
     * value: "FINISHED"
     * @const
     */
    "FINISHED": "FINISHED",

    /**
     * value: "AVAILABLE"
     * @const
     */
    "AVAILABLE": "AVAILABLE",

    /**
     * value: "UNAVAILABLE"
     * @const
     */
    "UNAVAILABLE": "UNAVAILABLE"
};



export default RideOfferResponse;

